@using System;
@using System.Linq;
@using Sandbox;
@using Sandbox.UI;
@using Facepunch.Hover;
@using System.Collections.Generic;

@namespace Facepunch.Hover.UI
@attribute [StyleSheet( "/ui/WeaponList.scss" )]
@inherits Panel

<root></root>

@code
{
    public static WeaponList Instance { get; private set; }

    public WeaponListItem[] Weapons { get; set; } = new WeaponListItem[6];

    private RealTimeUntil RemainOpenUntil { get; set; }

    public WeaponList()
    {
        BindClass( "closed", IsCollapsed );
        Instance = this;
    }

    public bool IsCollapsed()
    {
        return RemainOpenUntil;
    }

    public override void Tick()
    {
        base.Tick();

        if ( Game.LocalPawn is not HoverPlayer player )
            return;

        for ( int i = 0; i < Weapons.Length; i++ )
        {
            var weapon = Weapons[i];
            weapon.IsHidden = true;
        }

        var weapons = player.Children.OfType<Weapon>().ToList();
        weapons.Sort( ( a, b ) => a.Slot.CompareTo( b.Slot ) );

        var currentIndex = 0;

        foreach ( var child in weapons )
        {
            if ( currentIndex < Weapons.Length )
            {
                var weapon = Weapons[currentIndex];

                weapon.IsActive = (player.ActiveChild == child);
                weapon.IsHidden = false;
                weapon.IsPassive = child.IsPassive;
                weapon.IsAbility = false;
                weapon.IsAvailable = child.IsAvailable();
                weapon.Weapon = child;

                var keyBind = string.Empty;

                if ( weapon.IsAvailable && !weapon.IsPassive )
                {
                    keyBind = IndexToSlotKey( currentIndex );
                }

                if ( child is Equipment equipment )
                {
                    weapon.IsUsingAbility = equipment.IsUsingAbility;

                    if ( !string.IsNullOrEmpty( equipment.AbilityBind ) )
                    {
                        keyBind = equipment.AbilityBind;
                        weapon.IsAbility = true;
                    }
                }
                else
                {
                    weapon.IsUsingAbility = false;
                }

                weapon.KeyBind = keyBind;

                currentIndex++;
            }
        }
    }

    protected override void OnAfterTreeRender( bool firstTime )
    {
        DeleteChildren(true);

        Weapons = new WeaponListItem[6];

        for ( int i = 0; i < 6; i++ )
        {
            var weapon = AddChild<WeaponListItem>( "weapon" );
            weapon.IsHidden = true;
            weapon.IsActive = false;
            Weapons[i] = weapon;
        }

        base.OnAfterTreeRender( firstTime );
    }

    private string IndexToSlotKey( int index )
    {
		return $"iv_slot{index + 1}";
    }

	private int SlotPressInput()
	{
		if ( Input.Pressed( InputButton.Slot1 ) ) return 1;
		if ( Input.Pressed( InputButton.Slot2 ) ) return 2;
		if ( Input.Pressed( InputButton.Slot3 ) ) return 3;
		if ( Input.Pressed( InputButton.Slot4 ) ) return 4;
		if ( Input.Pressed( InputButton.Slot5 ) ) return 5;
		if ( Input.Pressed( InputButton.Slot6 ) ) return 6;

		return -1;
	}

	private bool CanSelectWeapon( WeaponListItem weapon )
	{
		if ( !weapon.IsHidden && weapon.Weapon.IsValid()
			&& !weapon.Weapon.IsPassive && weapon.Weapon.IsAvailable() )
		{
			return true;
		}

		return false;
	}

	private void PreviousWeapon( HoverPlayer player )
	{
		var currentIndex = 0;

		for ( int i = 0; i < Weapons.Length; i++ )
		{
			var weapon = Weapons[i];

			if ( weapon.IsActive )
			{
				currentIndex = i;
				break;
			}
		}

		currentIndex--;

		for ( int i = currentIndex; i >= 0; i-- )
		{
			var weapon = Weapons[i];

			if ( !CanSelectWeapon( weapon ) )
				currentIndex--;
			else
				break;
		}

		var firstIndex = GetFirstIndex();
		var lastIndex = GetLastIndex();

		if ( currentIndex < firstIndex )
		{
			currentIndex = lastIndex;
		}

		SelectWeapon( player,  currentIndex );
	}

    private void NextWeapon( HoverPlayer player )
	{
		var currentIndex = 0;

		for ( int i = 0; i < Weapons.Length; i++ )
		{
			var weapon = Weapons[i];

			if ( weapon.IsActive )
			{
				currentIndex = i;
				break;
			}
		}

		currentIndex++;

		for ( int i = currentIndex; i < Weapons.Length; i++ )
		{
			var weapon = Weapons[i];

			if ( !CanSelectWeapon( weapon ) )
				currentIndex++;
			else
				break;
		}


		var firstIndex = GetFirstIndex();
		var lastIndex = GetLastIndex();

		if ( currentIndex > lastIndex )
			currentIndex = firstIndex;

		SelectWeapon( player, currentIndex );
	}

	private int GetLastIndex()
	{
		for ( int i = Weapons.Length - 1; i >= 0; i-- )
		{
			var weapon = Weapons[i];

			if ( CanSelectWeapon( weapon ) )
			{
				return i;
			}
		}

		return 0;
	}

	private int GetFirstIndex()
	{
		for ( int i = 0; i < Weapons.Length; i++ )
		{
			var weapon = Weapons[i];

			if ( CanSelectWeapon( weapon ) )
			{
				return i;
			}
		}

		return 0;
	}

    private void SelectWeapon( HoverPlayer player, int index )
	{
		var weapon = Weapons[index];

		if ( CanSelectWeapon( weapon ) && player.ActiveChild != weapon.Weapon )
		{
			player.ActiveChildInput = weapon.Weapon;
			RemainOpenUntil = 3f;
		}
	}

	[Event.Client.BuildInput]
	private void ProcessClientInput()
	{
        if ( Game.LocalPawn is not HoverPlayer player )
			return;

		if ( Input.MouseWheel == 1 )
		{
			NextWeapon( player );
			Input.MouseWheel = 0;
		}
		else if ( Input.MouseWheel == -1 )
		{
			PreviousWeapon( player );
			Input.MouseWheel = 0;
		}
		else
		{
			var pressedInput = SlotPressInput();

			if ( pressedInput != -1 )
			{
				SelectWeapon( player, pressedInput - 1 );
			}
		}

		WeaponListItem activeWeapon = null;

		for ( int i = 0; i < Weapons.Length; i++ )
		{
			var weapon = Weapons[i];

			if ( weapon.IsActive )
			{
				activeWeapon = weapon;
				break;
			}
		}

		if ( activeWeapon != null && !CanSelectWeapon( activeWeapon ) )
		{
			var firstIndex = GetFirstIndex();
			var firstWeapon = Weapons[firstIndex];

			if ( CanSelectWeapon( firstWeapon ) )
				player.ActiveChildInput = firstWeapon.Weapon;
			else
				player.ActiveChildInput = null;
		}
	}
}
