@using System;
@using System.Linq;
@using Sandbox;
@using Sandbox.UI;
@using Sandbox.UI.Construct;
@using Facepunch.Hover;
@using Facepunch.Hover.Utility;
@using System.Collections.Generic;
@using Gamelib.Extensions;

@namespace Facepunch.Hover.UI
@attribute [StyleSheet( "/ui/stationscreen/StationScreen.scss" )]
@inherits Panel

<root>
  <StationScreenView class="loadout-view" default name="loadout">
    <div class="character-panel">
      <div class="panel-left">
        <div class="character-header">
            <label class="loadout-weight">@LoadoutInfo.Weight</label>
            <label class="loadout-name">@LoadoutInfo.Name</label>
            <label class="loadout-description">@LoadoutInfo.Description</label>
          <div @ref="TagsList" class="tags-list">
          </div>
        </div>

        <div class="character-weapons">
          <div class="weapon-row">
            <LoadoutWeaponItem index="0" />
            <LoadoutWeaponItem index="1" />
          </div>
          <div class="weapon-row">
            <LoadoutWeaponItem index="2" />
            <LoadoutWeaponItem index="3" />
            <LoadoutWeaponItem index="4" />
          </div>
        </div>
      </div>
      <div class="panel-right">
        <div class="character-level">
          <div class="level-box">
            <label>@UpgradeLevel</label>
          </div>
          <div class="upgrade-available">
            <label>@UpgradeText</label>
          </div>
          <StationScreenButton @ref="UpgradeButton" onpressed=@DoLoadoutUpgrade class="btn is-primary is-small level-button">
            <div class="button-inside"></div>
            <label>@NextUpgradeLevel</label>
            <div class="icon"></div>
            <label>@UpgradeCost</label>
          </StationScreenButton>
        </div>

        <div @ref="AvatarRoot" class="character-icon-container">
            <ScenePanel @ref="AvatarPanel" World=@AvatarWorld></ScenePanel>
        </div>
        <div class="character-stats">
          <div class="stat-row">
            <label class="stat-name">Health</label>
            <label class="stat-value">@LoadoutInfo.Health</label>
          </div>

          <div class="stat-row">
            <label class="stat-name">Energy</label>
            <label class="stat-value">@LoadoutInfo.Energy</label>
          </div>

          <div class="stat-row">
            <label class="stat-name">Speed</label>
            <label class="stat-value">@LoadoutInfo.Speed</label>
          </div>
        </div>
      </div>
    </div>

    <div class="loadout-container">
      <LoadoutSelectList @ref="LoadoutList" OnLoadoutSelected=@OnLoadoutSelected></LoadoutSelectList>
      <div class="loadout-buttons">
        <StationScreenButton
          @ref="CancelButton"
          onpressed=@DoCancel
          class="btn is-secondary cancel-button"
        >
          <text>Cancel</text>
        </StationScreenButton>

        <StationScreenButton onpressed=@DoDeploy class="btn is-primary">
          <div class="button-inside"></div>
          <text>Deploy</text>
        </StationScreenButton>
      </div>
    </div>
  </StationScreenView>

  <StationScreenView class="weapon-view" name="weapon">
    <StationScreenButton class="back-button" onpressed=@( () => SetView( "loadout" ) )>
      <div class="icon"></div>
    </StationScreenButton>
    <div class="weapon-body">
      <div class="weapon-view-header">
        <label class="weapon-name">@SlotName</label>
        <div class="player-currency">
          <div class="currency-icon"></div>
          <label>@PlayerTokens</label>
        </div>
      </div>

      <div class="weapon-sub-body">
        <div @ref="WeaponList" class="weapon-list"></div>
        <div class="weapon-info">
          <div class="weapon-info-icon">
            <img @ref="WeaponIcon" class="actual-icon" />
          </div>
          <div class="box weapon-info-body">
            <label class="weapon-info-title">@(CurrentWeapon?.Name ?? "")</label>
            <label class="weapon-info-subtitle">@(CurrentWeapon?.Description ?? "")</label>
            <label @ref="SecondaryDescription" class="weapon-info-description">@(CurrentWeapon?.SecondaryDescription ?? "")</label>
          </div>

          <div @ref="StatsList" class="box weapon-stats">
            <label class="box-title">Weapon Stats</label>
          </div>
        </div>
        <div @ref="UpgradesBox" class="box weapon-upgrades">
          <label class="box-title">Enhancements</label>
          <div @ref="UpgradesList" class="weapon-upgrades"></div>
        </div>
      </div>
    </div>
    <div class="weapon-view-buttons">
      <StationScreenButton
        class="btn is-secondary"
        onpressed=@( () => SetView( "loadout" ))
      >
        <text>Cancel</text>
      </StationScreenButton>
      <StationScreenButton class="btn is-primary" onpressed=@DoSelectWeapon>
        <div class="button-inside"></div>
        <text>Select Weapon</text>
      </StationScreenButton>
    </div>
  </StationScreenView>
</root>


@code
{
    public static StationScreen Instance { get; private set; }

    public struct LoadoutData
    {
        public string Name { get; set; }
        public string Weight { get; set; }
        public string Description { get; set; }
        public string Health { get; set; }
        public string Speed { get; set; }
        public string Energy { get; set; }
    }

    public List<SceneModel> SceneObjects { get; private set; } = new();
    public LoadoutSelectList LoadoutList { get; private set; }
    public StationScreenButton CancelButton { get; private set; }
    public StationScreenMode Mode { get; private set; }
    public WeaponConfig CurrentWeapon { get; private set; }
    public WeaponConfig[] Weapons { get; private set; }
    public LoadoutData LoadoutInfo { get; set; }
    public Panel UpgradesList { get; private set; }
    public Image WeaponIcon { get; private set; }
    public string PlayerTokens => GetPlayerTokens();
    public BaseLoadout Loadout { get; private set; }
    public SceneWorld AvatarWorld { get; private set; }
    public ScenePanel AvatarPanel { get; set; }
    public SceneModel Avatar { get; private set; }
    public Vector3 AvatarHeadPos { get; private set; }
    public string UpgradeText => GetUpgradeText();
    public string UpgradeLevel => GetUpgradeLevel();
    public string NextUpgradeLevel => GetNextUpgradeLevel();
    public string UpgradeCost => GetUpgradeCost();
    public Panel UpgradeButton { get; private set; }
    public Label SecondaryDescription { get; private set; }
    public BaseLoadout NextUpgrade { get; private set; }
    public Vector3 AvatarAimPos { get; private set; }
    public Panel UpgradesBox { get; private set; }
    public Panel AvatarRoot { get; private set; }
    public Panel WeaponList { get; private set; }
    public Panel TagsList { get; private set; }
    public Panel StatsList { get; private set; }
    public int CurrentSlot { get; private set; }
    public bool IsOpen { get; private set; }
    public string SlotName => Loadout?.GetSlotName( CurrentSlot ) ?? string.Empty;

    public StationScreen()
    {
        SetClass( "hidden", true );

        AvatarWorld = new SceneWorld();

        var model = Model.Load( "models/citizen/citizen.vmdl" );

        Avatar = new SceneModel( AvatarWorld, model, Transform.Zero );

        SceneObjects.Add( Avatar );

        var lightWarm = new SceneSpotLight( AvatarWorld, Vector3.Up * 100f + Vector3.Forward * 100f + Vector3.Right * -200f, new Color( 1f, 0.95f, 0.8f ) * 60f );
        lightWarm.Rotation = Rotation.LookAt( lightWarm.Position );
        lightWarm.ConeInner = 90f;
        lightWarm.ConeOuter = 90f;

        var lightBlue = new SceneSpotLight( AvatarWorld, Vector3.Up * 100f + Vector3.Forward * -100f + Vector3.Right * 100f, new Color( 0f, 0.4f, 1f ) * 100f );
        lightBlue.Rotation = Rotation.LookAt( -lightBlue.Position );
        lightBlue.ConeInner = 90f;
        lightBlue.ConeOuter = 90f;

        Instance?.Delete();
        Instance = this;
    }

    public void SetWeapon( WeaponConfig config )
    {
        var items = WeaponList.ChildrenOfType<LoadoutWeaponListItem>();

        foreach ( var item in items )
        {
            item.IsActive = (item.Config.GetType() == config.GetType());
        }

        UpgradesList.DeleteChildren();

        if ( config.Upgrades != null )
        {
            for ( int i = 0; i < config.Upgrades.Count; i++ )
            {
                var upgrade = TypeLibrary.Create<WeaponUpgrade>( config.Upgrades[i] );
                var item = UpgradesList.AddChild<LoadoutWeaponUpgradeItem>();
                item.Upgrade = upgrade;
                item.Weapon = config;
                item.Index = i;
            }

            UpgradesBox.SetClass( "hidden", false );
        }
        else
        {
            UpgradesBox.SetClass( "hidden", true );
        }

        WeaponIcon.SetTexture( config.Icon );

        StatsList.DeleteChildren();

        var stats = config.GetStats();

        for ( int i = 0; i < stats.Count; i++ )
        {
            var item = StatsList.AddChild<WeaponStatItem>();
            item.Stat = stats[i];
        }

        SecondaryDescription.SetClass( "hidden", string.IsNullOrEmpty( config.SecondaryDescription ) );

        CurrentWeapon = config;
    }

    public void CreateAvatar()
    {
        foreach ( var sceneObject in SceneObjects )
        {
            if ( sceneObject.Parent.IsValid() )
            {
                sceneObject.Delete();
            }
        }

        SceneObjects.Clear();

        var allClothing = ResourceLibrary.GetAll<Clothing>();
        var localPawn = (Game.LocalPawn as HoverPlayer);

        foreach ( var clothing in Loadout.Clothing )
        {
            var modelName = allClothing
                .Where( c => c.ResourceName.ToLower() == clothing.ToLower() )
                .Select( c => c.Model )
                .FirstOrDefault();

            var clothes = new SceneModel( AvatarWorld, Model.Load( modelName ), Avatar.Transform );
            clothes.ColorTint = localPawn.Team.GetColor();
            Avatar.AddChild( "clothing", clothes );
            SceneObjects.Add( clothes );
        }

        SceneObjects.Add( Avatar );

        foreach ( var sceneObject in SceneObjects )
        {
            sceneObject.Update( RealTime.Delta );
        }
    }

    public void SetLoadout( BaseLoadout loadout )
    {
        if ( Game.LocalPawn is not HoverPlayer player )
        {
            return;
        }

        LoadoutInfo = new LoadoutData
		{
			Name = loadout.Name,
			Description = loadout.Description,
			Energy = $"{loadout.Energy.CeilToInt()}",
			Health = $"{loadout.Health.CeilToInt()}",
			Speed = $"{loadout.MaxSpeed}m/s",
			Weight = loadout.ArmorType.ToString()
		};

        var configs = new WeaponConfig[loadout.AvailableWeapons.Length];

        // If we are this loadout, default to the weapons we have equipped.
        if ( player.Loadout.GetType() == loadout.GetType() )
        {
            foreach ( var weapon in player.Children.OfType<Weapon>() )
            {
                var slotToIndex = weapon.Slot - 1;

                if ( slotToIndex < configs.Length )
                {
                    foreach ( var valid in loadout.AvailableWeapons[slotToIndex] )
                    {
                        if ( weapon.Config.Name == valid.Name )
                        {
                            configs[slotToIndex] = weapon.Config;
                        }
                    }
                }
            }
        }

        for ( var i = 0; i < configs.Length; i++ )
        {
            if ( configs[i] == null )
            {
                configs[i] = loadout.AvailableWeapons[i].FirstOrDefault();
            }
        }

        var weaponsList = this.GetAllChildrenOfType<LoadoutWeaponItem>();

        foreach ( var weapon in weaponsList )
        {
            var slot = weapon.Index;

            weapon.Loadout = loadout;

            if ( configs.Length > slot )
                weapon.Config = configs[slot];
            else
                weapon.Config = null;
        }

        TagsList.DeleteChildren();

        foreach ( var tag in loadout.Tags )
        {
            var item = TagsList.Add.Label( tag.Name, "tag" );

            if ( tag.Type == LoadoutTagType.Secondary )
                item.AddClass( "type-1" );
            else if ( tag.Type == LoadoutTagType.Tertiary )
                item.AddClass( "type-2" );
            else if ( tag.Type == LoadoutTagType.Quaternary )
                item.AddClass( "type-3" );
        }

        UpgradeButton.BindClass( "hidden", IsUpgradeButtonHidden );

        if ( loadout.UpgradesTo != null )
            NextUpgrade = TypeLibrary.Create<BaseLoadout>( loadout.UpgradesTo );
        else
            NextUpgrade = null;

        Weapons = configs;
        Loadout = loadout;

        CreateAvatar();
    }

    public void SetOpen( bool isOpen )
    {
        if ( Game.LocalPawn is HoverPlayer player )
        {
            SetClass( "hidden", !isOpen );
            IsOpen = isOpen;

            if ( isOpen )
            {
                LoadoutList.Populate( player );
            }
        }
    }

    public void SetMode( StationScreenMode mode )
    {
        CancelButton.SetClass( "hidden", mode == StationScreenMode.Deployment );
        Mode = mode;
    }

    public void SetView( string name )
    {
        foreach ( var view in ChildrenOfType<StationScreenView>() )
        {
            if ( view.Name == name )
                view.IsActive = true;
            else
                view.IsActive = false;
        }

        Audio.Play( "hover.clickbeep" );
    }

    public void DoLoadoutUpgrade()
    {
        if (NextUpgrade == null) return;

        if ( Game.LocalPawn is HoverPlayer player )
        {
            if ( player.HasTokens( NextUpgrade.UpgradeCost ) )
            {
                HoverPlayer.BuyLoadoutUpgrade( NextUpgrade.GetType().Name, string.Join( ",", Weapons.Select( v => v.Name ) ) );
            }
            else
            {
                var tokensNeeded = NextUpgrade.UpgradeCost - player.Tokens;
                UI.Hud.Toast( $"You need {tokensNeeded} Tokens for this upgrade!", "ui/icons/icon_currency_blue.png" );
            }

            Audio.Play( "hover.clickbeep" );
        }
    }

    public void DoSelectWeapon()
    {
        Weapons[CurrentSlot] = CurrentWeapon;

        var weaponsList = this.GetAllChildrenOfType<LoadoutWeaponItem>();

        foreach ( var weapon in weaponsList )
        {
            if ( weapon.Index == CurrentSlot )
            {
                weapon.Loadout = Loadout;
                weapon.Config = CurrentWeapon;
            }
        }

        SetView( "loadout" );
    }

    public void OpenWeapons( int slot )
    {
        if ( slot >= Loadout.AvailableWeapons.Length )
            return;

        SetView( "weapon" );

        WeaponList.DeleteChildren();

        var weapons = Loadout.AvailableWeapons[slot];

        foreach ( var weapon in weapons )
        {
            var item = WeaponList.AddChild<LoadoutWeaponListItem>();
            item.Config = weapon;
        }

        SetWeapon( Weapons[slot] );

        CurrentSlot = slot;
    }

    public void DoCancel()
    {
        Hide();

        Audio.Play( "hover.clickbeep" );
    }

    public void DoDeploy()
    {
        Hide();

        Audio.Play( "hover.clickbeep" );

        var loadout = LoadoutList.Selected.Loadout;
        var loadoutName = loadout.GetType().Name;

        HoverPlayer.ChangeLoadout( loadoutName, string.Join( ",", Weapons.Select( v => v.Name ) ) );
    }

    public override void Tick()
    {
        foreach ( var sceneObject in SceneObjects )
        {
            sceneObject.Update( RealTime.Delta );
        }

        var mousePosition = Mouse.Position;

        mousePosition.x -= AvatarPanel.Box.Rect.Width * 2f;
        mousePosition.y -= AvatarPanel.Box.Rect.Height * 0.5f;
        mousePosition /= AvatarPanel.ScaleToScreen;

        var worldPos = new Vector3( 200f, mousePosition.x, -mousePosition.y );
        var lookPos = Avatar.Transform.PointToLocal( worldPos );

        AvatarHeadPos = Vector3.Lerp( AvatarHeadPos, Avatar.Transform.PointToLocal( worldPos ), Time.Delta * 20.0f );
        AvatarAimPos = Vector3.Lerp( AvatarAimPos, Avatar.Transform.PointToLocal( worldPos ), Time.Delta * 5.0f );

        Avatar.SetAnimParameter( "b_grounded", true );
        Avatar.SetAnimParameter( "aim_eyes", lookPos );
        Avatar.SetAnimParameter( "aim_head", AvatarHeadPos );
        Avatar.SetAnimParameter( "aim_body", AvatarAimPos );
        Avatar.SetAnimParameter( "aim_body_weight", 1.0f );
    }

    protected string GetUpgradeText()
    {
        if ( NextUpgrade != null )
            return $"Upgrade Available";
        else
            return "Max Level";
    }

    protected string GetUpgradeLevel()
    {
        return $"{Loadout?.Level ?? 0}";
    }

    protected string GetNextUpgradeLevel()
    {
        if ( NextUpgrade != null )
            return $"Level {NextUpgrade.Level}";
        else
            return "";
    }

    protected string GetUpgradeCost()
    {
        if ( NextUpgrade != null )
            return NextUpgrade.UpgradeCost.ToString();
        else
            return "";
    }

    protected bool IsUpgradeButtonHidden()
    {
        return (NextUpgrade == null);
    }

    protected string GetPlayerTokens()
    {
        if ( Game.LocalPawn is HoverPlayer player )
            return player.Tokens.ToString();
        else
            return "0";
    }

    protected void OnLoadoutSelected( BaseLoadout loadout )
    {
        SetLoadout( loadout );
    }

    protected override void OnAfterTreeRender( bool firstTime )
    {
        CancelButton.SetClass( "hidden", Mode == StationScreenMode.Deployment );

        var angles = new Angles( 0f, 180f, 0f );
        var position = Vector3.Up * 55f + angles.Forward * -100f;

        AvatarPanel.Camera.Position = position;
        AvatarPanel.Camera.Rotation = Rotation.From( angles );
        AvatarPanel.Camera.FieldOfView = 25f;
        AvatarPanel.Camera.AmbientLightColor = Color.Gray * 0.2f;

        base.OnAfterTreeRender( firstTime );
    }
}
